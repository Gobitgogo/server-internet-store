// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  email      String    @unique
  password   String
  name       String    @unique
  avatarPath String    @default("/uploads/default-avatar.png")
  phone      String    @default("")
  orders     Order[]
  reviews    Review[]
  favorites  Product[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String      @unique
  slug        String      @unique
  description String
  price       Int
  images      String[]
  orderItems  OrderItem[]
  reviews     Review[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?     @db.ObjectId
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  slug      String
  products  Product[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  text      String
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Order {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  status    EnumOrderStatus @default(PENDING)
  items     OrderItem[]
  user      User?           @relation(fields: [userId], references: [id])
  userId    String?         @db.ObjectId
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  price     Int
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPED
  DELIVERED
}
